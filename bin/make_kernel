#!/bin/bash

set -ex

source helper/common

usage() {
    cat <<'___'
Usage: make_kernel dest

Builds the kernel for this device.

dest: directory to write the resulting .deb files to.

___
    exit 1
}
test -d "$1" || usage

DEST="$1"

if test "$kind" = "rock" ; then
    DEFCONFIG=rock-pi-4-rk3399_defconfig
    DTB=rk3399-rock-pi-4.dtb
    ARCH=arm64
    CROSS_COMPILE=aarch64-linux-gnu-
fi

export ARCH CROSS_COMPILE

D=$(pwd)
pushd $(mirror kernel)
git checkout $TARGET
cp $D/config/$TARGET .config
make olddefconfig
if ! fgrep -qsx "CONFIG_LOCALVERSION_AUTO=y" .config ; then
    die "CONFIG_LOCALVERSION_AUTO must be set"
fi
if ! grep -qs mkdeb-pkg scripts/package/Makefile ; then
    cat >>scripts/package/Makefile << '___'
mkdeb-pkg: FORCE 
	$(CONFIG_SHELL) $(srctree)/scripts/package/mkdebian
___
fi

REL=$(make kernelrelease)
if echo "$REL" | grep -qs 'dirty$' ; then
    die "You need to check in your kernel changes before building."
fi
make mkdeb-pkg
VERS=$(dpkg-parsechangelog | sed -ne s/^Version: //p)
popd

if test -s $DEST/linux.version && test "$(cat $DEST/linux.version)" = "$VERS"  ; then
    echo Kernel already current.
else
    pushd $(mirror kernel)
    # we could analyze "present" instead, but that's way more work
    make -j$(ls -1 /sys/devices/system/cpu | grep 'cpu[0-9]' | wc -l) bindeb-pkg
    cd ..
    mv linux-image-${REL}_${VERS]_arm64.deb $DEST/linux-image.deb
    mv linux-libc-dev-${REL}_${VERS]_arm64.deb $DEST/linux-libc-dev.deb
    mv linux-headers-${REL}_${VERS]_arm64.deb $DEST/linux-headers.deb
    echo $VERS > $DEST/linux.version
    popd
fi

