#!/bin/bash

set -ex

source helper/common

usage() {
    cat <<'___'
Usage: make_kernel dest

Builds the kernel for this device.

dest: directory to write the resulting .deb files to.

___
    exit 1
}
test "$#" -gt 0 && test -d "$1" || usage

DEST="$1"

cc_cmd=
if test -v CC ; then
    cc_cmd="CC=${CC}"
fi
j="-j$(ls -1 /sys/devices/system/cpu | grep 'cpu[0-9]' | wc -l)"

pushd $(mirror kernel)
git checkout $TARGET
cmp -s "$ORIG_PWD/config/kernel/$TARGET" .config || cp "$ORIG_PWD/config/kernel/$TARGET" .config
make olddefconfig prepare
test -v MENU && make menuconfig
cmp -s "$ORIG_PWD/config/kernel/$TARGET" .config || cp .config "$ORIG_PWD/config/kernel/$TARGET"
if ! fgrep -qsx "CONFIG_LOCALVERSION_AUTO=y" .config ; then
    die "CONFIG_LOCALVERSION_AUTO must be set"
fi
if ! grep -qs mkdeb-pkg scripts/Makefile.package ; then
    cat >>scripts/Makefile.package << '___'
PHONY += mkdeb-pkg
mkdeb-pkg:
	$(CONFIG_SHELL) $(srctree)/scripts/package/mkdebian
___
    git commit -m "add mkdeb-pkg target" -- scripts/Makefile.package
fi

REL=$(make kernelrelease)
if echo "$REL" | grep -qs 'dirty$' ; then
    die "You need to check in your kernel changes before building."
fi
#make ARCH=$ARCH $(dpkg-architecture -a$DEB_ARCH) $cc_cmd $j vmlinux modules
make ARCH=$ARCH $(dpkg-architecture -a$DEB_ARCH) $cc_cmd $j mkdeb-pkg
VERS=$(dpkg-parsechangelog | sed -ne 's/^Version: //p')
popd

if test -s $DEST/linux.version && test "$(cat $DEST/linux.version)" = "$REL"  ; then
    echo Kernel already current.
else
    pushd $(mirror kernel)
    # we could analyze "present" instead, but that's way more work
    dpkg-buildpackage -b -us -uc -nc -a $DEB_ARCH -j$(ls -1 /sys/devices/system/cpu | grep 'cpu[0-9]' | wc -l)
    cd ..
    mv linux-image-${REL}_${VERS}_${DEB_ARCH}.deb $DEST/linux-image.deb
    mv linux-libc-dev_${VERS}_${DEB_ARCH}.deb $DEST/linux-libc-dev.deb
    mv linux-headers-${REL}_${VERS}_${DEB_ARCH}.deb $DEST/linux-headers.deb
    echo $REL > $DEST/linux.version
    popd
fi

