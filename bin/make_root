#!/bin/bash

source helper/common

usage() {
    cat <<'___'
Usage: make_root device_or_rootdir_or_image bootimage?

Builds root+boot file systems.

Argumments:

* rootfs dir

* bootfs dir

Either of these may be image files or partitions, which get mounted while
building.
___
    exit 1
}

DIST=${DIST:-stable}

QEMU=/usr/bin/qemu-${ARCH_PREFIX:-$BIN_ARCH}-static
P=""
test -f /usr/bin/systemd-nspawn || P="$P systemd-container"
test -f /usr/bin/realpath || P="$P realpath"
test -f $QEMU || P="$P qemu-user-static"
test -f /usr/bin/${CROSS_COMPILE}gcc || P="$P ${BIN_ARCH_PKG:-gcc-$BIN_ARCH-linux-gnu}"
test -f /lib/systemd/system/polkit.service || P="$P policykit-1"
test -f /sbin/mkfs.vfat || P="$P dosfstools"
test -f /usr/bin/flex || P="$P flex"
test -f /usr/bin/bison || P="$P bison"
test -f /usr/include/openssl/seed.h || P="$P openssl-dev"
test -f /usr/bin/make || P="$P make"
test -f /usr/bin/strace || P="$P strace"
test -f /usr/sbin/update-binfmts || P="$P binfmt-support"
test -z "$P" || sudo apt-get install --no-install-recommends $P

if test "$1" = "/" ; then
	R=/
	echo WARNING running on current system
elif test -z "$1" || test "$1" = "--" ; then
	echo "You need to supply a place to store the root image."
	exit 1
elif test -b "$1" ; then
	mount "$1" $R
elif test -d "$1" ; then
	mount "$1" $R
else
	test -s "$1" || touch "$1"
	DEV=$(loopback "$1" -P)
	mount ${DEV}p${P_ROOT} $R
	if test $# -eq 1 ; then
		if test -v BOOT_TMP; then
			: # done below
		elif test -v P_BOOT; then
			mount ${DEV}p${P_BOOT} $R/boot
		fi
	fi
fi

shift
sudo mkdir -p $R/boot

if test $# -eq 0 ; then
	:
elif test "$1" = "--" ; then
	:
elif test "$1" = "-" ; then
	shift
elif test -b "$1" ; then
	mount "$1" $R/boot
	shift
elif test -d "$1" ; then
	mount "$1" $R/boot
	shift
else
	test -s "$1"
	DEV=$(loopback "$1")
	mount $DEV $R/boot
	shift
fi

if test -v BOOT_TMP; then
	mountpoint -q $R/boot || mount tmpfs $R/boot -t tmpfs 
fi

sudo mkdir -p $R/$T

if test "$#" -gt 0 && test "$1" = "--" ; then shift; fi

set -u

QEMU=/usr/bin/qemu-${ARCH_PREFIX:-$BIN_ARCH}-static
if ! test -x $R/$QEMU ; then
	mkdir -p $R
	sudo mkdir -p $R/usr/bin/
	sudo cp $QEMU $R/usr/bin/
fi
if ! test -x $R/bin/dash ; then
	sudo debootstrap --arch=$DEB_ARCH --foreign --variant=minbase $DIST $R
fi
if test -x $R/debootstrap/debootstrap ; then
	sudo chroot $R /debootstrap/debootstrap --second-stage
	test ! -f $R/debootstrap/debootstrap
fi

mkdir -p $T/kernel
bin/make_kernel $T/kernel

mkdir -p $T/run
sudo mkdir -p $R/etc
if test -L $R/etc/resolv.conf ; then
	sudo rm -f $R/etc/resolv.conf
fi
if test ! -s $R/etc/resolv.conf ; then
	cat_to $R/etc/resolv.conf /etc/resolv.conf
fi

C="sudo systemd-nspawn -a -M $(basename $T | sed -e s/_/-/) -D $R --bind=$T"
# does not work: --bind=$T/run:/run"

if ! test -s $R/usr/bin/gpg-agent ; then # for apt-key
	$C apt update -y
	$C apt-get install --no-install-recommends -y gpg gpg-agent
fi

# Add distro and user specific archive
if test -s apt/$TARGET ; then
	source apt/$TARGET
fi
if test -v SPECIAL ; then
	for S in $SPECIAL ; do
		source helper/apt/$S
	done
fi

### now find packages to install

PKG=""
test -f $R/usr/bin/eatmydata || PKG="$PKG eatmydata"
if test -n "$PKG" ; then
	$C apt update -y
	$C apt-get install --no-install-recommends -y $PKG
fi

PKG=""
test -f $R/lib/systemd/systemd || PKG="$PKG systemd"
test -f $R/usr/bin/aptitude || PKG="$PKG aptitude"
test -f $R/usr/bin/strace || PKG="$PKG strace"
test -f $R/usr/bin/pstree || PKG="$PKG psmisc"
test -f $R/usr/bin/ssh || PKG="$PKG openssh-client"
test -f $R/usr/sbin/update-initramfs || PKG="$PKG initramfs-tools"
test -f $R/usr/bin/file || PKG="$PKG file"
test -f $R/usr/sbin/sshd || PKG="$PKG openssh-server"
test -f $R/usr/bin/dbus-daemon || PKG="$PKG dbus"
test -f $R/usr/share/perl5/Term/ReadLine/Perl.pm || PKG="$PKG libterm-readline-perl-perl"
test -f $R/usr/bin/less || PKG="$PKG less"
test -f $R/usr/bin/vim.tiny || PKG="$PKG vim-tiny"
test -f $R/sbin/ip || PKG="$PKG iproute2"
test -f $R/sbin/lsmod || PKG="$PKG kmod"
test -f $R/sbin/udevadm || PKG="$PKG udev"
test -f $R/sbin/init || PKG="$PKG systemd-sysv"
test -f $R/usr/bin/fw_printenv || PKG="$PKG u-boot-tools"

source snips/$TARGET/missing_packages

if test -n "$PKG" ; then
	$C eatmydata apt update -y
	$C eatmydata apt-get install --no-install-recommends -y $PKG
fi

$C systemctl enable systemd-networkd
$C systemctl enable systemd-resolved
if [ "$R" != "/" ] && [ "$(cat $R/etc/hostname)" == "$(cat /etc/hostname)" ] ; then
	# Duh.
	echo_to $R/etc/hostname TODO
fi

if test ! -s $R/boot/config-$(cat $T/kernel/linux.version) ; then
	source snips/$TARGET/pre-kernel-install
	$C eatmydata dpkg -i $T/kernel/linux-image.deb
fi

if grep -qs Storage=auto $R/etc/systemd/journald.conf ; then
	sudo sed -i -e 's/^#* *Storage=.*/Storage=volatile/' $R/etc/systemd/journald.conf
fi

source snips/$TARGET/partinfo
source snips/$TARGET/post_root

if test -v SPECIAL ; then
	for s in $SPECIAL ; do
		source helper/special/$s
	done
fi

sudo rm -rf $R/var/tmp/* $R/tmp/*

if test -n "$*" ; then
$C "$@"
fi

